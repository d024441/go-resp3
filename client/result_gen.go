// Code generated by "converter"; DO NOT EDIT.

package client

// ToBooler converts a redis value to a bool.
// In case the conversion is not supported a ConversionError is returned.
func (r *result) ToBool() (bool, error) {
	if err := r.wait(); err != nil {
		return false, err
	}
	return r.value.ToBool()
}

// ToFloat64 converts a redis value to a float64.
// In case the conversion is not supported a ConversionError is returned.
func (r *result) ToFloat64() (float64, error) {
	if err := r.wait(); err != nil {
		return 0, err
	}
	return r.value.ToFloat64()
}

// ToInt64 converts a redis value to an int64.
// In case the conversion is not supported a ConversionError is returned.
func (r *result) ToInt64() (int64, error) {
	if err := r.wait(); err != nil {
		return 0, err
	}
	return r.value.ToInt64()
}

// ToInt64Slice returns a slice with values of type int64. In case value conversion to string is not possible
// a ConversitionError is returned.
func (r *result) ToInt64Slice() ([]int64, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToInt64Slice()
}

// ToSlice returns a slice with values of type interface{}.
func (r *result) ToSlice() ([]interface{}, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToSlice()
}

// ToSlice2 returns a slice with values of type []interface{}. In case value conversion to []interface{} is not possible
// a ConversitionError is returned.
func (r *result) ToSlice2() ([][]interface{}, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToSlice2()
}

// ToString converts a redis value to a string.
// In case the conversion is not supported a ConversionError is returned.
func (r *result) ToString() (string, error) {
	if err := r.wait(); err != nil {
		return "", err
	}
	return r.value.ToString()
}

// ToStringInt64Map returns a map with keys of type string and values of type int64. In case key or value conversion is not possible
// a ConvertionError is returned.
func (r *result) ToStringInt64Map() (map[string]int64, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToStringInt64Map()
}

// ToStringMap returns a map with keys of type string. In case key conversion to string is not possible
// a ConvertionError is returned.
func (r *result) ToStringMap() (map[string]interface{}, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToStringMap()
}

// ToStringMapSlice returns a slice with values of type map[string]interfcae{}. In case value conversion to map[string]interface{} is not possible
// a ConversitionError is returned.
func (r *result) ToStringMapSlice() ([]map[string]interface{}, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToStringMapSlice()
}

// ToStringSet returns a map with keys of type string and boolean true values. In case key conversion to string is not possible
// a ConvertionError is returned.
func (r *result) ToStringSet() (map[string]bool, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToStringSet()
}

// ToStringSlice returns a slice with values of type string. In case value conversion to string is not possible
// a ConversitionError is returned.
func (r *result) ToStringSlice() ([]string, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToStringSlice()
}

// ToStringStringMap returns a map with keys and values of type string. In case key or value conversion to string is not possible
// a ConvertionError is returned.
func (r *result) ToStringStringMap() (map[string]string, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToStringStringMap()
}

// ToTree returns a tree with nodes of type []interface{} and leaves of type interface{}. In case value conversion to []interface{} is not possible
// a ConversitionError is returned.
func (r *result) ToTree() ([]interface{}, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToTree()
}

// ToXrange returns a slice with values of type XItem. In case the conversion is not possible
// a ConversitionError is returned.
func (r *result) ToXrange() ([]XItem, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToXrange()
}

// ToXread returns a map[string] with values of type XItem. In case the conversion is not possible
// a ConversitionError is returned.
func (r *result) ToXread() (map[string][]XItem, error) {
	if err := r.wait(); err != nil {
		return nil, err
	}
	return r.value.ToXread()
}
