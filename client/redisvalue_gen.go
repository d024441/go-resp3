// Code generated by "converter"; DO NOT EDIT.

package client

// ToInt64Slice returns a slice with values of type int64. In case value conversion to string is not possible
// a ConversitionError is returned.
func (v RedisValue) ToInt64Slice() ([]int64, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToInt64Slice()
}

// ToSlice returns a slice with values of type interface{}.
func (v RedisValue) ToSlice() ([]interface{}, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToSlice()
}

// ToSlice2 returns a slice with values of type []interface{}. In case value conversion to []interface{} is not possible
// a ConversitionError is returned.
func (v RedisValue) ToSlice2() ([][]interface{}, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToSlice2()
}

// ToStringInt64Map returns a map with keys of type string and values of type int64. In case key or value conversion is not possible
// a ConvertionError is returned.
func (v RedisValue) ToStringInt64Map() (map[string]int64, error) {
	m, err := v.Map()
	if err != nil {
		return nil, err
	}
	return m.ToStringInt64Map()
}

// ToStringMap returns a map with keys of type string. In case key conversion to string is not possible
// a ConvertionError is returned.
func (v RedisValue) ToStringMap() (map[string]interface{}, error) {
	m, err := v.Map()
	if err != nil {
		return nil, err
	}
	return m.ToStringMap()
}

// ToStringMapSlice returns a slice with values of type map[string]interfcae{}. In case value conversion to map[string]interface{} is not possible
// a ConversitionError is returned.
func (v RedisValue) ToStringMapSlice() ([]map[string]interface{}, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToStringMapSlice()
}

// ToStringSet returns a map with keys of type string and boolean true values. In case key conversion to string is not possible
// a ConvertionError is returned.
func (v RedisValue) ToStringSet() (map[string]bool, error) {
	set, err := v.Set()
	if err != nil {
		return nil, err
	}
	return set.ToStringSet()
}

// ToStringSlice returns a slice with values of type string. In case value conversion to string is not possible
// a ConversitionError is returned.
func (v RedisValue) ToStringSlice() ([]string, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToStringSlice()
}

// ToStringStringMap returns a map with keys and values of type string. In case key or value conversion to string is not possible
// a ConvertionError is returned.
func (v RedisValue) ToStringStringMap() (map[string]string, error) {
	m, err := v.Map()
	if err != nil {
		return nil, err
	}
	return m.ToStringStringMap()
}

// ToTree returns a tree with nodes of type []interface{} and leaves of type interface{}. In case value conversion to []interface{} is not possible
// a ConversitionError is returned.
func (v RedisValue) ToTree() ([]interface{}, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToTree()
}

// ToXrange returns a slice with values of type IdMap. In case the conversion is not possible
// a ConversitionError is returned.
func (v RedisValue) ToXrange() ([]IDMap, error) {
	slice, err := v.Slice()
	if err != nil {
		return nil, err
	}
	return slice.ToXrange()
}

// ToXread returns a map[string] with values of type IdMap. In case the conversion is not possible
// a ConversitionError is returned.
func (v RedisValue) ToXread() (map[string][]IDMap, error) {
	m, err := v.Map()
	if err != nil {
		return nil, err
	}
	return m.ToXread()
}
