/*
Copyright 2019 Stefan Miller

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strconv"
	"strings"
)

type buffer struct {
	b      bytes.Buffer
	indent int
}

// generic write methods
func (b *buffer) startBlock(values ...string) {
	b.write(values...)
	b.writeln(" {")
	b.indent++
}

func (b *buffer) endBlock(values ...string) {
	b.indent--
	b.write("}")
	b.writeln(values...)
}

func (b *buffer) endStartBlock(values ...string) {
	b.indent--
	b.write("} ")
	b.startBlock(values...)
}

func (b *buffer) startDef(values ...string) {
	b.write(values...)
	b.writeln(" (")
	b.indent++
}

func (b *buffer) endDef() {
	b.indent--
	b.writeln(")")
}

func (b *buffer) startInit(values ...string) {
	b.write(values...)
	b.writeln(" {")
	b.indent++
}

func (b *buffer) endInit(values ...string) {
	b.indent--
	b.write("}")
	b.writeln(values...)
}

func (b *buffer) write(values ...string) {
	b.b.WriteString(strings.Repeat("\t", b.indent))
	for _, v := range values {
		b.b.WriteString(v)
	}
}

func (b *buffer) writeln(values ...string) {
	b.write(values...)
	b.b.WriteString("\n")
}

func (b *buffer) comment(values ...string) {
	b.b.WriteString(strings.Repeat("\t", b.indent))
	b.b.WriteString("// ")
	b.write(values...)
}

func (b *buffer) commentln(values ...string) {
	b.comment(values...)
	b.b.WriteString("\n")
}

func (b *buffer) format() []byte {
	if fmt, err := format.Source(b.b.Bytes()); err == nil {
		return fmt
	}
	return b.b.Bytes()
}

func formatDestTypes(destTypes []string) string {
	switch len(destTypes) {
	case 0:
		return ""
	case 1:
		return destTypes[0]
	default:
		return "(" + strings.Join(destTypes, ",") + ")"
	}
}

type generator struct {
	b *buffer
}

func newGenerator() *generator {
	return &generator{b: new(buffer)}
}

const header = `// Code generated by %s; DO NOT EDIT.

package %s

`

func (g *generator) writeHeader(pkg string) {
	cmd := "converter"
	if len(os.Args[1:]) != 0 {
		cmd = strings.Join([]string{cmd, strings.Join(os.Args[1:], " ")}, " ")
	}
	g.b.write(fmt.Sprintf(header, strconv.Quote(cmd), pkg))
}

func (g *generator) writeDoc(doc []string) {
	for _, text := range doc {
		g.b.writeln(text)
	}
}

func (g *generator) generateResultIntf(fcts []*fct, pkg string) []byte {
	g.b.b.Reset()
	g.writeHeader(pkg)

	g.b.writeln("// Result represents a redis command result.")
	g.b.startInit("type Result interface")

	for _, fct := range fcts {
		if (fct.recvType == recvTypeAsyncResult) || (fct.recvType != recvTypeAsyncResult && fct.isConverter) {
			g.writeDoc(fct.doc)
			g.b.writeln(fct.name, "() ", formatDestTypes(fct.destTypes))
		}
	}
	g.b.endInit()
	return g.b.format()
}

var initialValue = map[string]string{
	"string":  "\"\"",
	"int64":   "0",
	"float64": "0",
	"bool":    "false",
}

func destTypeInitialValue(destType string) string {
	if v, ok := initialValue[destType]; ok {
		return v
	}
	return "nil"
}

const asyncResultTemplate = `func (r *asyncResult) %[1]s() %[2]s {
	if err := r.wait(); err != nil {
		return %[3]s, err
	}
	if r.err != nil {
		return %[3]s, r.err
	}
	return r.value.%[1]s()
}
`

func (g *generator) generateAsyncResultFcts(fcts []*fct, pkg string) []byte {
	g.b.b.Reset()
	g.writeHeader(pkg)

	for _, fct := range fcts {
		if fct.recvType != recvTypeAsyncResult && fct.isConverter {
			g.writeDoc(fct.doc)
			g.b.writeln(fmt.Sprintf(asyncResultTemplate, fct.name, formatDestTypes(fct.destTypes), destTypeInitialValue(fct.destTypes[0])))
		}
	}
	return g.b.format()
}

var varName = map[string]string{
	"Slice": "slice",
	"Map":   "m",
	"Set":   "set",
}

const redisValueTemplate = `func (v RedisValue) %[1]s() %[2]s {
	%[4]s, err := v.%[3]s()
	if err != nil {
		return nil, err
	}
	return %[4]s.%[1]s()
}
`

func (g *generator) generateRedisValueFcts(fcts []*fct, pkg string) []byte {
	g.b.b.Reset()
	g.writeHeader(pkg)

	for _, fct := range fcts {
		if fct.recvType != recvTypeAsyncResult && fct.recvType != recvTypeRedisValue && fct.isConverter {
			g.writeDoc(fct.doc)
			g.b.writeln(fmt.Sprintf(redisValueTemplate, fct.name, formatDestTypes(fct.destTypes), fct.recvType, varName[fct.recvType]))
		}
	}
	return g.b.format()
}
